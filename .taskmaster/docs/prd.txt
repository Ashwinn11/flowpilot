**Product Requirements Document (PRD)**

**Product Name:** Unblock
**Tagline:** Productivity without pretending.
**Owner:** Ashwin
**Version:** 1.0
**Last Updated:** 2025-07-23

---

## 1. Purpose

Unblock is a behavioral productivity system that transforms mental clutter into meaningful execution. Unlike traditional task managers, Unblock focuses on cognitive load reduction, real-time friction removal, and deep-work optimization. It acts like a productivity therapist and operator in your pocket.

---

## 2. Problem Statement

Most productivity tools focus on task organization, not behavior. Users still:

* Procrastinate
* Overload themselves
* Get distracted
* Don’t follow through

Unblock addresses this by:

* Detecting blockers
* Breaking friction
* Nudging toward execution
* Offering personalized interventions

---

## 3. Goals & Success Metrics

### Goals

* Shift users from intent to action in < 60 seconds
* Detect and resolve friction points in real time
* Create sustainable, self-reinforcing execution habits

### Success Metrics

* Daily planning streak
* Task completion rate (vs planned)
* Focus session adherence
* Blocker resolution rate

---

## 4. Target Users

* Creators & indie builders
* ADHD / neurodivergent users
* Professionals battling overwhelm
* Students

---

## 5. Core Features

### 1. Smart Daily Planner

* AI generates day plan from tasks + calendar
* Inputs:

  * User-defined goals
  * Synced calendar events
  * Past context (incomplete tasks, focus history)
* Outputs:

  * Prioritized task list
  * Time-blocked execution plan
  * Optional focus suggestions

### 2. Intent → Action Parser

* Input: free-form (text/voice)
* Uses TaskMaster AI to:

  * Break into subtasks
  * Assign deadlines and estimates
  * Schedule into calendar slots or plan list

### 3. Task Control Panel

Each task supports:

* ✅ Done — marks task completed
* 🗓️ Not Today — defers task with reasoning
* 💀 Kill — removes irrelevant/stale tasks
* 🔄 Reschedule — prompts AI or user to reschedule
* ⚙️ Auto — lets AI decide optimal time based on availability, priority, and energy profile

### 4. Focus Zone (Deep Work Mode)

* Full-screen timer (Pomodoro/custom)
* Live task progress + encouragement
* App/browsing distraction blockers
* Ambient sound + minimal UI
* Visual feedback for deep work consistency

### 5. Blocker Detection & Nudges

* Detects idle states, scrolling, inactivity
* Triggers intervention prompts like:

  * “What’s stopping you?”
  * “Start with 5-min mode?”
  * “Reschedule or drop it?”

### 6. Productivity Pulse (Daily Wrap-up)

* Summary at end of day:

  * Tasks completed (planned vs actual)
  * Focus score
  * Mood & energy tagging
  * Blockers cleared
* Visual streak + “Crushed it” moment

### 7. Integrations

* Google/Microsoft Calendar: sync & write
* Google Tasks (read/write)
* Slack (mute during deep work)
* TaskMaster AI (task parsing & micro-planning)

---

## 6. Technical Architecture

### Frontend

* Next.js 15 (App Router)
* Tailwind CSS
* shadcn/ui
* Zustand for local state

### Backend

* Supabase (Postgres, Edge functions, Auth)
* RLS for data security
* OpenAI (LLM APIs for parsing, planning, nudging)

### Cross-Platform

* React Native for mobile
* Web-first PWA

---

## 7. Data Models (Simplified)

### `users`

* id (uuid)
* email
* timezone
* energy\_profile (jsonb)

### `tasks`

* id (uuid)
* user\_id (fk)
* title
* description
* status (pending, done, killed, deferred)
* scheduled\_time (timestamptz)
* estimated\_time (interval)
* priority
* source (manual, calendar, AI)

### `focus_sessions`

* id
* user\_id
* task\_id (fk)
* started\_at
* ended\_at
* distractions\_detected
* focus\_rating

### `blockers`

* id
* task\_id
* type (internal, external, unknown)
* prompt\_shown
* resolved

### `daily_logs`

* id
* user\_id
* date
* tasks\_planned
* tasks\_completed
* focus\_score
* mood

---

## 8. Logic & Behavior Rules

### Calendar Events vs Tasks

* Google-synced events:

  * Can be marked done (updates event with ✅)
  * Can be deferred (moves to next open slot)
  * Cannot be deleted from Google unless user confirms

### Auto-Scheduling Logic

* Based on:

  * User availability
  * Task priority
  * Energy profile (low/high energy slots)
  * Past completion trends

### Task Lifecycle

* Created → Pending
* Pending → Done / Deferred / Killed / Auto-scheduled

---

## 9. Rollout Plan

**Phase 1 (MVP)**

* Daily Planner
* Task parsing with TaskMaster AI
* Task actions (Done, Kill, Not Today, Reschedule)
* Google Calendar sync (read)
* Focus Timer (basic)

**Phase 2**

* Full Focus Zone with distractions + blockers
* Blocker nudging + Snap out of scroll
* Calendar write support
* Progress wrap-up report

**Phase 3**

* Mobile app
* Advanced metrics (weekly review)
* Mood + energy based planning
* Smart habit suggestions

---

## 10. Risks & Mitigation

| Risk                  | Mitigation                                  |
| --------------------- | ------------------------------------------- |
| Calendar overwrite    | Show explicit confirmation dialogs          |
| LLM misinterpretation | Give user full edit control post-AI parsing |
| Task overload         | Hard cap + AI warnings when overcommitted   |
| Sync failure          | Retry queue + offline fallback              |

---

## 11. AI Prompt Contracts (for TaskMaster AI)

### Prompt Template

```text
Input: "I want to launch my website this weekend"
Output:
- Create homepage content (2 hrs)
- Design landing page (3 hrs)
- Deploy to Vercel (1 hr)
- Deadline: Sunday EOD
- Priority: High
```

---

## 12. Appendix

* Design mocks (Figma)
* Supabase schema.sql
* TaskMaster prompt contracts
* Deep Work scoring rubric
* Streak + reward system spec

---

#### Research Highlights

* Tools like Motion, Reclaim, Notion Calendar show demand for intelligent scheduling.
* LLMs can now understand task nuance better than rigid rule engines.

#### Fonts

* Use `Inter` or `SF Pro` for modern, readable style.
* Spacing model like Airbnb or Linear.

---


